-- 1 SOLVE THE BELOW QUESTIONS EACH QUESTION OF 2 MARKS 
  
-- i. WRITE AN SQL QUERY TO FETCH FULLNAME , SALARY , JOINING_DATE AND DEPARTMENT FROM 
-- WORKER TABLE. 
SELECT FIRST_NAME,SALARY,JOINING_DATE, DEPARTMENT FROM Worker;

--     ii.WRITE AN SQL QUERY TO FETCH ID , FULLNAME , SALARY AND DEPARTMENT WHOSE DEPARTMENT 
-- IS HR OR ADMIN 

SELECT WORKER_ID, CONCAT(FIRST_NAME," ",LAST_NAME) AS FULLNAME, SALARY FROM Worker WHERE DEPARTMENT IN ("HR","ADMIN");
--    iii.WRITE AN SQL QUERY TO FETCH ID , FULLNAME , SALARY WHOSE FIRST_NAME ENDS WITH 'a'

SELECT WORKER_ID,CONCAT(FIRST_NAME," ",LAST_NAME) AS FULLNAME, SALARY FROM Worker WHERE SUBSTR(FIRST_NAME,-1) = 'a';
--    iv. WRITE AN SQL QUERY TO FEACH ALL RECORDS OF WORKER TABLE WHO HAVE JOIN IN FEB 2020 

SELECT * FROM Worker WHERE YEAR(JOINING_DATE) = 2020 AND MONTH(JOINING_DATE) = 4;

--     V. WRITE AN SQL QUERY TO FEACH ALL RECORDS OF WORKER TABLE WHO HAVE SALARY >=50000 
-- AND <=100000.   
 
 SELECT * FROM worker WHERE SALARY BETWEEN 50000 AND 100000;

-- 2 SOLVE THE BELOW QUESTIONS EACH QUESTION OF 3 MARKS  
 
--    i. WRITE AN SQL QUERY TO DISPLAY NUMBER OF WORKER IN EACH DEPARTMENT ALONG WITH 
-- UNIQUE DEPARTMENT NAME 
SELECT COUNT(*) AS WORKER_NUMBER,DEPARTMENT FROM worker GROUP BY DEPARTMENT;

--    ii.WRITE AN SQL QUERY TO DISPLAY DEPARTMENT NAME AND TOTAL BONUS AMOUNT TO BE PAID IN 
-- EACH DEPARTMENT 

SELECT w.DEPARTMENT AS DEPARTMENT_NAME,SUM(b.BONUS_AMOUNT) AS TOTAL_BONUS_AMOUNT
FROM worker w INNER JOIN bonus b ON w.WORKER_ID = b.WORKER_REF_ID GROUP BY w.DEPARTMENT;

--   iii.WRITE AN SQL QUERY TO DISPALY THE FULLNAME , SALARY , TOTAL YEARS OF EXPERIANCE OF 
-- EACH WORKER  

SELECT CONCAT(FIRST_NAME," ",LAST_NAME) AS FULLNAME,
SALARY,
DATE_FORMAT(FROM_DAYS(DATEDIFF(NOW(),JOINING_DATE)),'%Y')+0 AS TOTAL_YEARS 
FROM worker;

--OR

SELECT CONCAT(FIRST_NAME," ",LAST_NAME) AS FULLNAME,
SALARY,
FLOOR((DATEDIFF(NOW(),JOINING_DATE))/365) AS TOTAL_YEARS
FROM worker;

--OR

SELECT CONCAT(FIRST_NAME," ",LAST_NAME) AS FULLNAME,
SALARY,
FLOOR(TIMESTAMPDIFF(YEAR,JOINING_DATE,NOW())) AS TOTAL_YEARS
FROM worker;

--    iv.WRITE AN SQL QUERY TO DISPALY THE DETAILS OF THE WORKER WHO IS MANAGER  

SELECT w.WORKER_ID, w.FIRST_NAME, w.LAST_NAME, w.SALARY, w.JOINING_DATE, w.DEPARTMENT, t.WORKER_TITLE
FROM worker w INNER JOIN  title t ON w.WORKER_ID = t.WORKER_REF_ID WHERE WORKER_TITLE='manager';





-- ################################# FUNCTION #######################################
--  CREATE A FUNCTION IN MYSQL THAT WILL ACCEPT THE ONE INPUT PARAMETER AS WORKER ID
--  AND BASED ON THE ID
--  RETURN THE TOTAL SALARY IN EACH DEPARTMENTS

 DROP FUNCTION IF EXISTS SalSum;

 DELIMITER &&

 CREATE FUNCTION SalSum(id INT)

 RETURNS INT 
 DETERMINISTIC

 BEGIN
    DECLARE sal_sum INT;
    SELECT SUM(SALARY) AS TOTAL_SAL into sal_sum 
    FROM worker GROUP BY DEPARTMENT 
    HAVING DEPARTMENT = (SELECT DEPARTMENT FROM worker WHERE WORKER_ID=id);
    return sal_sum;
 END;

 &&
 
 DELIMITER ;
-- TO CALL THE FUNCTION

SELECT SalSum(1) AS TotalSalaryByDepartment;




-- ################################# TRIGGER #######################################
--  CREATE A AFTER INSERT TRIGGER IN MYSQL 
--  CREATE AN EMP_DETAILS TABLES AS FOLLOWS
--  ID , FIRST_NAME , LAST_NAME , DEPARTMENT_ID ,SALARY
--  WHEN AN INSERT HAPPEN INTO THE EMP_DETAILS TABLE INSERT THE FIRST_NAME , LAST_NAME
--  AND SALARY INTO THE
--  EMP_LOG_DETAILS TABLE 

-- Create the EMP_DETAILS table
CREATE TABLE EMP_DETAILS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    FIRST_NAME VARCHAR(50),
    LAST_NAME VARCHAR(50),
    DEPARTMENT_ID INT,
    SALARY INT
);

-- Create the EMP_LOG_DETAILS table
CREATE TABLE EMP_LOG_DETAILS (
    LOG_ID INT AUTO_INCREMENT PRIMARY KEY,
    FIRST_NAME VARCHAR(50),
    LAST_NAME VARCHAR(50),
    SALARY INT,
    LOG_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create the AFTER INSERT trigger
DELIMITER //
CREATE TRIGGER after_emp_details_insert
AFTER INSERT ON EMP_DETAILS
FOR EACH ROW
BEGIN
    INSERT INTO EMP_LOG_DETAILS (FIRST_NAME, LAST_NAME, SALARY)
    VALUES (NEW.FIRST_NAME, NEW.LAST_NAME, NEW.SALARY);
END;
//
DELIMITER ;






-- ################################# CURSOR #######################################
--  CREATE A CURSOR IN MYSQL, BY USING THE CURSOR RETURN THE COMMA SEPRATED LIST OF
--  WORKER NAMES

   
DROP PROCEDURE IF EXISTS WorkerList;

DELIMITER $$

CREATE PROCEDURE WorkerList()

BEGIN

DECLARE v_flag INT DEFAULT 0;
DECLARE v_name_worker VARCHAR(255) DEFAULT "";
DECLARE worker_list VARCHAR(255);
DECLARE temp VARCHAR(255);
DECLARE v_cur CURSOR FOR SELECT FIRST_NAME FROM worker;

DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_flag=1;

  OPEN v_cur;

  SET @worker_list = "";  
    
    label:LOOP
  
    FETCH v_cur into v_name_worker;
    
      IF v_flag=1 THEN
        LEAVE label;
      END IF;

    SET @worker_list = CONCAT(@worker_list,v_name_worker,', ');    
    END LOOP;
  
  CLOSE v_cur;

  SET temp = TRIM(TRAILING ', ' FROM @worker_list);
  SELECT temp;
  
  INSERT INTO result VALUES(temp);
END;

$$

DELIMITER ;
